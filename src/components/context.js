import React from "react";

function Context() {
  return (
    <div className="headertext">
      <div className="useEfect">
        <h1>Контекст</h1>
        <p>
          Контекст разработан для передачи данных, которые можно назвать
          «глобальными» для всего дерева React-компонентов (например, текущий
          аутентифицированный пользователь, UI-тема или выбранный язык).
        </p>
        <h2>React.createContext</h2>
        <div className="componentscode">
          <pre>
            <code>
              {` const MyContext = React.createContext(defaultValue);
            `}
            </code>
          </pre>
        </div>

        <p>
          Создаёт объект Context.Когда React рендерит компонент, который
          подписан на этот объект, React получит текущее значение контекста из
          ближайшего подходящего Provider выше в дереве компонентов.
          <br />
          Аргумент defaultValue используется только в том случае, если для
          компонента нет подходящего Provider выше в дереве. Значение по
          умолчанию может быть полезно для тестирования компонентов в изоляции
          без необходимости оборачивать их. Обратите внимание: если передать
          undefined как значение Provider, компоненты, использующие этот
          контекст, не будут использовать defaultValue.
        </p>
        <h2>Context.Provider</h2>

        <div className="componentscode">
          <pre>
            <code>
              {`<MyContext.Provider value={/* некоторое значение */}>
            `}
            </code>
          </pre>
        </div>
        <p>
          Каждый объект Context используется вместе с Provider компонентом,
          который позволяет дочерним компонентам, использующим этот контекст,
          подписаться на его изменения.
          <br />
          Компонент Provider принимает проп value, который будет передан во все
          компоненты, использующие этот контекст и являющиеся потомками этого
          компонента Provider.Один Provider может быть связан с несколькими
          компонентами, потребляющими контекст.Так же компоненты Provider могут
          быть вложены друг в друга, переопределяя значение контекста глубже в
          дереве.
        </p>
        <h2>Context.Consumer</h2>
        <div className="componentscode">
          <pre>
            <code>
              {`<MyContext.Consumer>
  {value => /* отрендерить что-то, используя значение контекста */}
</MyContext.Consumer>
            `}
            </code>
          </pre>
        </div>
        <p>
          Consumer — это React-компонент, который подписывается на изменения
          контекста.В свою очередь, использование этого компонента позволяет вам
          подписаться на контекст в функциональном компоненте. <br />
          Consumer принимает функцию в качестве дочернего компонента.Эта функция
          принимает текущее значение контекста и возвращает React-компонент.
          Передаваемый аргумент value будет равен ближайшему (вверх по дереву)
          значению этого контекста, а именно пропу value компонента Provider.
          Если такого компонента Provider не существует, аргумент value будет
          равен значению defaultValue, которое было передано в createContext().
        </p>
      </div>
    </div>
  );
}
export { Context };
